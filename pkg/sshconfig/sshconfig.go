package sshconfig

import (
	"os"

	sshconfig "github.com/kevinburke/ssh_config"
)

type HostOptions struct {
	Name     string
	User     string
	Hostname string
	KeyPath  string
}

func GenerateHost(h HostOptions) (*sshconfig.Host, error) {
	p, err := sshconfig.NewPattern(h.Name)
	if err != nil {
		return nil, err
	}

	host := sshconfig.Host{
		Patterns: []*sshconfig.Pattern{p},
		Nodes: []sshconfig.Node{
			&sshconfig.KV{Key: "HostName", Value: h.Hostname},
			&sshconfig.KV{Key: "IdentitiesOnly", Value: "yes"},
			&sshconfig.KV{
				Key:     "IdentityFile",
				Value:   h.KeyPath,
				Comment: "Generated by mkssh",
			},
			&sshconfig.KV{Key: "Protocol", Value: "2"},
		},
		EOLComment: "Generated by mkssh",
	}

	if h.User != "" {
		host.Nodes = append(host.Nodes, &sshconfig.KV{Key: "User", Value: h.User})
	}

	return &host, nil
}

func AddOrReplaceHost(cfg *sshconfig.Config, host *sshconfig.Host) {
	for i, h := range cfg.Hosts {
		if len(h.Patterns) != 1 || h.Patterns[0].String() != host.Patterns[0].String() {
			continue
		}
		cfg.Hosts[i] = host
		return
	}
	cfg.Hosts = append(cfg.Hosts, host)
}

func LoadConfig(path string) (*sshconfig.Config, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	return sshconfig.Decode(f)
}

func WriteConfig(cfg *sshconfig.Config, path string) error {
	return os.WriteFile(path, []byte(cfg.String()), 0o644)
}

func UpdateHostInConfig(configPath string, h HostOptions) error {
	host, err := GenerateHost(h)
	if err != nil {
		return err
	}

	cfg, err := LoadConfig(configPath)
	if err != nil {
		return err
	}

	AddOrReplaceHost(cfg, host)

	if err := WriteConfig(cfg, configPath); err != nil {
		return err
	}

	return nil
}
