package sshconfig

import (
	"os"

	sshconfig "github.com/kevinburke/ssh_config"
)

func GenerateHost(name string, hostname string, keyPath string) (*sshconfig.Host, error) {
	p, err := sshconfig.NewPattern(name)
	if err != nil {
		return nil, err
	}

	h := sshconfig.Host{
		Patterns: []*sshconfig.Pattern{p},
		Nodes: []sshconfig.Node{
			&sshconfig.KV{Key: "HostName", Value: hostname},
			&sshconfig.KV{Key: "IdentitiesOnly", Value: "yes"},
			&sshconfig.KV{
				Key:     "IdentityFile",
				Value:   keyPath,
				Comment: "Generated by mkssh",
			},
		},
		EOLComment: "Generated by mkssh",
	}
	return &h, nil
}

func AddOrReplaceHost(cfg *sshconfig.Config, host *sshconfig.Host) {
	for i, h := range cfg.Hosts {
		if len(h.Patterns) != 1 || h.Patterns[0].String() != host.Patterns[0].String() {
			continue
		}
		cfg.Hosts[i] = host
		return
	}
	cfg.Hosts = append(cfg.Hosts, host)
}

func LoadConfig(path string) (*sshconfig.Config, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	return sshconfig.Decode(f)
}

func WriteConfig(cfg *sshconfig.Config, path string) error {
	return os.WriteFile(path, []byte(cfg.String()), 0o644)
}

func UpdateHostInConfig(configPath string, name string, hostname string, keyPath string) error {
	host, err := GenerateHost(name, hostname, keyPath)
	if err != nil {
		return err
	}

	cfg, err := LoadConfig(configPath)
	if err != nil {
		return err
	}

	AddOrReplaceHost(cfg, host)

	if err := WriteConfig(cfg, configPath); err != nil {
		return err
	}

	return nil
}
